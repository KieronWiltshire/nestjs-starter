http {
    upstream game_servers {
        # List your game server instances here
        server game-server-1:3000;
        server game-server-2:3000;
        server game-server-3:3000;
    }

    # Redis connection for lobby lookups
    lua_shared_dict lobby_cache 10m;
    init_by_lua_block {
        redis = require "resty.redis"
        cjson = require "cjson"
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 80;
        server_name ~^(?<lobby_id>[^.]+)\.yourdomain\.com$;

        location / {
            access_by_lua_block {
                -- Connect to Redis
                local red = redis:new()
                red:set_timeout(1000)
                local ok, err = red:connect("redis-host", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    return ngx.exit(500)
                end

                -- Get the server instance for this lobby
                local instance, err = red:hget("games.instances", ngx.var.lobby_id)
                if not instance then
                    ngx.log(ngx.ERR, "Lobby not found: ", ngx.var.lobby_id)
                    return ngx.exit(404)
                end

                -- Store the instance in a variable for proxy_pass
                ngx.var.target_instance = instance
            }

            proxy_pass http://$target_instance;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }
    }
} 